import { fail, message, setError, superValidate } from 'sveltekit-superforms';
import { schemasafe } from 'sveltekit-superforms/adapters';
import { schema as deleteSchema } from '$lib/components/quizzes/deleteForm.js';

// =============================================
// Page Load Handler
// =============================================

/* Generated by GPT-4o */ 

// Loads quiz data, verifies ownership, and sets up delete form functionality
export async function load({ params, locals: { supabase, safeGetSession } }) {
    const { session } = await safeGetSession();
    const { id } = params;

 /* End Generated Code */


    // ---- Quiz Fetching ----
    // Retrieve the quiz and verify it exists
    const { data: quiz, error: quizError } = await supabase
        .from('quizzes')
        .select('*')
        .eq('id', id)
        .single();

    if (quizError) {
        return {
            status: 404,
            error: 'Quiz not found'
        };
    }

    // ---- Authorization Check ----
    // Ensure the current user owns this quiz
    if (quiz.owner_id !== session.user.id) {
        return {
            status: 403,
            error: 'Unauthorized'
        };
    }

    // ---- Questions Loading ----
    // Fetch all questions and their associated answers
    const { data: questions } = await supabase
        .from('questions')
        .select(`
            id,
            question,
            order,
            answers (
                id,
                answer,
                is_correct,
                order
            )
        `)
        .eq('quiz_id', id)
        .order('order');

/* Generated by GPT-4o */

    // ---- Form Setup ----
    // Initialize the delete form validation
    const deleteAdapter = schemasafe(deleteSchema);
    const deleteForm = await superValidate(deleteAdapter);

    return {
        quiz,
        questions: questions || [],
        deleteForm
    };

/* End Generated Code */

}

// =============================================
// Form Actions
// =============================================

/* Generated by GPT-4o */

export const actions = {
    // Handles the deletion of a question and its associated answers
    delete: async ({ request, locals: { supabase } }) => {
        // Validate the delete request
        const adapter = schemasafe(deleteSchema);
        const form = await superValidate(request, adapter);
        
        if (!form.valid) {
            return fail(400, { form });
        }

 /* End Generated Code */

        // Delete associated answers first
        const { error: answersError } = await supabase
            .from('answers')
            .delete()
            .eq('question_id', form.data.id);

        if (answersError) {
            return setError(form, 'id', 'Failed to delete answers');
        }

        // Then delete the question itself
        const { error: questionError } = await supabase
            .from('questions')
            .delete()
            .eq('id', form.data.id);

        if (questionError) {
            return setError(form, 'id', 'Failed to delete question');
        }

        return message(form, 'Question deleted successfully!');
    }
};